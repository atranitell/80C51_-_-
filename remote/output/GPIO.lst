C51 COMPILER V9.52.0.0   GPIO                                                              09/21/2015 00:52:50 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE GPIO
OBJECT MODULE PLACED IN .\output\GPIO.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE src\GPIO.c LARGE OMF2 BROWSE DEBUG PRINT(.\output\GPIO.lst) OBJECT(.\out
                    -put\GPIO.obj)

line level    source

   1          //========================================================================
   2          //      STCunio Studio淘宝http://shop112966725.taobao.com
   3          //      STCunio Studio QQ群:117112538
   4          //      作者：mingbozhu
   5          //      联系方式：13724273732
   6          //      邮箱：mingbozhu@yeah.net
   7          //      修改日期2014.11.17
   8          //      版本V1.1
   9          //========================================================================
  10          
  11          #include        "GPIO.h"
  12          u8 code digital_pin_to_bit_mask_PGM[]={
  13              0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,//D0-D7掩码   P3
  14              0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,//D8-D15掩码  P2
  15              0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,//D16-D23掩码 P4
  16              0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,//D24-D31掩码 P5
  17              0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,//D32-D39掩码 P6
  18              0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,//D40-D47掩码 P7
  19              0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,//D48-D55掩码 P0
  20              0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80 //D56-D63掩码 P1
  21          };
  22          u8 code digital_pin_to_bit_PGM[]={
  23              0,1,2,3,4,5,6,7,//D0-D7   P3
  24              0,1,2,3,4,5,6,7,//D8-D15  P2
  25              0,1,2,3,4,5,6,7,//D16-D23 P4
  26              0,1,2,3,4,5,6,7,//D24-D31 P5
  27              0,1,2,3,4,5,6,7,//D32-D39 P6
  28              0,1,2,3,4,5,6,7,//D40-D47 P7
  29              0,1,2,3,4,5,6,7,//D48-D55 P0
  30              0,1,2,3,4,5,6,7 //D56-D63 P1
  31          };
  32          u8 code digital_pin_to_port_PGM[]={
  33              0,0,0,0,0,0,0,0,//D0-D7   P3
  34              1,1,1,1,1,1,1,1,//D8-D15  P2
  35              2,2,2,2,2,2,2,2,//D16-D23 P4
  36              3,3,3,3,3,3,3,3,//D24-D31 P5
  37              4,4,4,4,4,4,4,4,//D32-D39 P6
  38              5,5,5,5,5,5,5,5,//D40-D47 P7
  39              6,6,6,6,6,6,6,6,//D48-D55 P0
  40              7,7,7,7,7,7,7,7 //D56-D63 P1
  41          }; 
  42          u8 code digital_pin_mode_PxM1_PGM[4][8]={
  43              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//上拉准双向口
  44              0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,//浮空输入
  45              0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,//开漏输出
  46              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//推挽输出
  47          };
  48          u8 code digital_pin_mode_PxM0_PGM[4][8]={
  49              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//上拉准双向口
  50              0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//浮空输入
  51              0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,//开漏输出
  52              0x01,0x02,0x04,0x08,0x10,0x20,0x40,0x80,//推挽输出    
  53          };
  54          //========================================================================
C51 COMPILER V9.52.0.0   GPIO                                                              09/21/2015 00:52:50 PAGE 2   

  55          //      设置Digital IO的工作模式
  56          //      STCunio有4种IO工作模式
  57          //      1.准双向模式（内部上拉）PullUp
  58          //      2.高阻输入模式 HighZ
  59          //      3.开漏模式(内部断开上拉)OpenD
  60          //      4.推挽输出模式 OutPP
  61          //========================================================================   
  62          void pinMode(u8 pin,u8 mode)
  63          {
  64   1              u8 Bitmask,Bit,Port,PxM1,PxM0;
  65   1              Port = digital_pin_to_port_PGM[pin];
  66   1        Bitmask  = digital_pin_to_bit_mask_PGM[pin];
  67   1        Bit  = digital_pin_to_bit_PGM[pin];
  68   1        PxM1 = digital_pin_mode_PxM1_PGM[mode][Bit];
  69   1        PxM0 = digital_pin_mode_PxM0_PGM[mode][Bit];
  70   1              switch(Port)
  71   1              {
  72   2                      case 0://P3 0-7
  73   2                  P3M1  = (P3M1&~Bitmask)|PxM1;
  74   2                  P3M0  = (P3M0&~Bitmask)|PxM0;
  75   2                                                      break;
  76   2                      case 1://P2 8-15        
  77   2                  P2M1  = (P2M1&~Bitmask)|PxM1;
  78   2                  P2M0  = (P2M0&~Bitmask)|PxM0;
  79   2                                                      break;
  80   2                      case 2://P4 16-23
  81   2                  P4M1  = (P4M1&~Bitmask)|PxM1;
  82   2                  P4M0  = (P4M0&~Bitmask)|PxM0;
  83   2                                                      break;
  84   2                      case 3://P5 24-31
  85   2                  P5M1  = (P5M1&~Bitmask)|PxM1;
  86   2                  P5M0  = (P5M0&~Bitmask)|PxM0;
  87   2                                                      break;
  88   2                      case 4://P6 32-39
  89   2                  P6M1  = (P6M1&~Bitmask)|PxM1;
  90   2                  P6M0  = (P6M0&~Bitmask)|PxM0;
  91   2                                                      break;
  92   2                      case 5://P7 40-47
  93   2                  P7M1  = (P7M1&~Bitmask)|PxM1;
  94   2                  P7M0  = (P7M0&~Bitmask)|PxM0;
  95   2                                                      break;
  96   2                      case 6://P0 48-55
  97   2                  P0M1  = (P0M1&~Bitmask)|PxM1;
  98   2                  P0M0  = (P0M0&~Bitmask)|PxM0;
  99   2                                                      break;
 100   2                      case 7://P1 56-63
 101   2                  P1M1  = (P1M1&~Bitmask)|PxM1;
 102   2                  P1M0  = (P1M0&~Bitmask)|PxM0;
 103   2                                                      break;
 104   2                      default:
 105   2                                                      break;
 106   2              }       
 107   1      }
 108          
 109          //写IO口
 110          void digitalWrite(u8 pin,u8 value)
 111          {
 112   1              u8 Bitmask,Port;
 113   1              
 114   1              Port = digital_pin_to_port_PGM[pin];
 115   1        Bitmask  = digital_pin_to_bit_mask_PGM[pin];
 116   1              switch(Port)
C51 COMPILER V9.52.0.0   GPIO                                                              09/21/2015 00:52:50 PAGE 3   

 117   1              {
 118   2                      case 0://P3 0-7                 
 119   2                                      if(value)P3|=Bitmask;
 120   2                                      else P3&=~Bitmask;                      
 121   2                                      break;
 122   2                      case 1://P2 8-15        
 123   2                                if(value)P2|=Bitmask;
 124   2                                else P2&=~Bitmask;                            
 125   2                                      break;
 126   2                      case 2://P4 16-23
 127   2                                if(value)P4|=Bitmask;
 128   2                                else P4&=~Bitmask;
 129   2                                      break;
 130   2                      case 3://P5
 131   2                                if(value)P5|=Bitmask;
 132   2                                else P5&=~Bitmask;
 133   2                                      break;
 134   2                      case 4://P6
 135   2                                if(value)P6|=Bitmask;
 136   2                                else P6&=~Bitmask;
 137   2                                      break;
 138   2                      case 5://P7
 139   2                                if(value)P7|=Bitmask;
 140   2                                else P7&=~Bitmask;
 141   2                                      break;
 142   2                case 6://P0
 143   2                                if(value)P0|=Bitmask;
 144   2                                else P0&=~Bitmask;
 145   2                                      break;
 146   2                      case 7://P1
 147   2                                if(value)P1|=Bitmask;
 148   2                                else P1&=~Bitmask;
 149   2                                      break;
 150   2                      default:
 151   2                                      break;  
 152   2              }
 153   1      }
 154          //将Digital IO取反
 155          void pinInvert(u8 pin)
 156          {       
 157   1              u8 Bitmask,Port;
 158   1              Port = digital_pin_to_port_PGM[pin];
 159   1        Bitmask  = digital_pin_to_bit_mask_PGM[pin];
 160   1              switch(Port)
 161   1              {
 162   2                      case 0:
 163   2                                      P3^=Bitmask;
 164   2                                      break;
 165   2                      case 1:
 166   2                                      P2^=Bitmask;
 167   2                                      break;
 168   2                      case 2:
 169   2                                      P4^=Bitmask;
 170   2                                      break;
 171   2                      case 3:
 172   2                                      P5^=Bitmask;
 173   2                                      break;
 174   2                      case 4:
 175   2                                      P6^=Bitmask;
 176   2                                      break;
 177   2                      case 5:
 178   2                                      P7^=Bitmask;
C51 COMPILER V9.52.0.0   GPIO                                                              09/21/2015 00:52:50 PAGE 4   

 179   2                                      break;
 180   2                      case 6:
 181   2                                      P0^=Bitmask;
 182   2                                      break;
 183   2                      case 7:
 184   2                                      P1^=Bitmask;
 185   2                                      break;
 186   2                      default:
 187   2                                      break;
 188   2              }
 189   1      }
 190          //读IO的状态
 191          
 192          u8 digitalRead(u8 pin)
 193          {
 194   1              u8 Bitmask,Port;
 195   1              
 196   1              Port = digital_pin_to_port_PGM[pin];
 197   1        Bitmask  = digital_pin_to_bit_mask_PGM[pin];
 198   1              switch(Port)
 199   1              {
 200   2                      case 0:
 201   2                                      
 202   2                                      if(P3&Bitmask)return HIGH;
 203   2                                      else return LOW;                                
 204   2                                      break;
 205   2                      case 1:
 206   2                                      if(P2&Bitmask)return HIGH;
 207   2                                      else return LOW;
 208   2                                      break;
 209   2                      case 2:
 210   2                                      if(P4&Bitmask)return HIGH;
 211   2                                      else return LOW;
 212   2                                      break;
 213   2                      case 3:
 214   2                                      if(P5&Bitmask)return HIGH;
 215   2                                      else return LOW;
 216   2                                      break;
 217   2                      case 4:
 218   2                                      if(P6&Bitmask)return HIGH;
 219   2                                      else return LOW;
 220   2                                      break;
 221   2                      case 5:
 222   2                                      if(P7&Bitmask)return HIGH;
 223   2                                      else return LOW;
 224   2                                      break;
 225   2                      case 6:
 226   2                                      if(P0&Bitmask)return HIGH;
 227   2                                      else return LOW;
 228   2                                      break;
 229   2                      case 7:
 230   2                                      if(P1&Bitmask)return HIGH;
 231   2                                      else return LOW;
 232   2                                      break;
 233   2                      default:
 234   2                                      return LOW;
 235   2                                      break;
 236   2              }
 237   1      
 238   1      }
 239          //========================================================================
 240          // 函数: shiftOut(u8 dataPin,u8 clockPin,u8 bitOrder,u8 value)
C51 COMPILER V9.52.0.0   GPIO                                                              09/21/2015 00:52:50 PAGE 5   

 241          // 描述: 串行发送数据。
 242          // 参数: dataPin，选择需要的数据线所在的引脚。
 243          // 参数：clockPin，选择需要的时钟线所在的引脚。
 244          // 参数：bitOrder，选择发送数据的顺序，包括MSBFIRST最高位先发和LSBFIRST最低位先发
 245          // 参数：value，发送的数据
 246          // 返回: none.
 247          // 版本: VER1.1
 248          // 日期: 2014-11-17
 249          // 备注: 
 250          //========================================================================  
 251          void shiftOut(u8 dataPin,u8 clockPin,u8 bitOrder,u8 value)
 252          {
 253   1                      unsigned char   i;
 254   1              for(i=0; i<8; i++)
 255   1              { 
 256   2                      if(bitOrder==MSBFIRST)
 257   2                      {
 258   3                                      if(value & 0x80)digitalWrite(dataPin,HIGH);
 259   3                                      else                    digitalWrite(dataPin,LOW);
 260   3                                value = value << 1;
 261   3                      }
 262   2                      else
 263   2                      {
 264   3                                      if(value & 0x01)digitalWrite(dataPin,HIGH);
 265   3                                      else                    digitalWrite(dataPin,LOW);
 266   3                                value = value >> 1;
 267   3                      }                                       
 268   2                      digitalWrite(clockPin,HIGH);
 269   2                      digitalWrite(clockPin,LOW);             
 270   2              }
 271   1      }
 272          //========================================================================
 273          // 函数: shiftIn(u8 dataPin,u8 clockPin,u8 bitOrder)
 274          // 描述: 串行接收数据。
 275          // 参数: dataPin，选择需要的数据线所在的引脚。
 276          // 参数：clockPin，选择需要的时钟线所在的引脚。
 277          // 参数：bitOrder，选择接收数据的顺序，包括先收MSBFIRST最高位和先收LSBFIRST最低位
 278          // 返回: value，接收的数据
 279          // 版本: VER1.1
 280          // 日期: 2014-11-17
 281          // 备注: 
 282          //========================================================================
 283          u8 shiftIn(u8 dataPin,u8 clockPin,u8 bitOrder)
 284          
 285          {
 286   1                      char    i;
 287   1                unsigned char value=0;
 288   1        if(bitOrder==MSBFIRST)
 289   1        {
 290   2          for(i=7; i>=0; i--)
 291   2          { 
 292   3              digitalWrite(clockPin,HIGH);
 293   3              digitalWrite(clockPin,LOW);
 294   3                                value |= (digitalRead(dataPin)<<i);                                                                           
 295   3          }
 296   2        }
 297   1        else  
 298   1        {
 299   2          for(i=0; i<=7; i++)
 300   2          {
 301   3              digitalWrite(clockPin,HIGH);                                                                                                                            
 302   3              digitalWrite(clockPin,LOW);       
C51 COMPILER V9.52.0.0   GPIO                                                              09/21/2015 00:52:50 PAGE 6   

 303   3              value |= (digitalRead(dataPin)<<i);
 304   3          }
 305   2        }
 306   1              return value;
 307   1      }
 308          //========================================================================
 309          // 函数: tone(u8 pin,u16 frequency)
 310          // 描述: 发出一定频率的函数。
 311          // 参数: pin，选择需要引脚。
 312          // 参数：frequency，设置发出的频率。
 313          // 返回: none
 314          // 版本: VER1.1
 315          // 日期: 2014-11-17
 316          // 备注: 
 317          //========================================================================
 318          void tone(u8 pin,u16 frequency)
 319          {
 320   1          u8 TH_TEMP,TL_TEMP;
 321   1          u16 TIM_Value;
 322   1          switch(pin)
 323   1          {
 324   2            case 5: //T0
 325   2                    TMOD &= ~0x03;    //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3: 16位自动重装
             -, 不可屏蔽中断
 326   2                    AUXR &= ~0x80;    //12T
 327   2                    TMOD &= ~0x04;    //定时  
 328   2                    INT_CLKO |= 0x01; //输出时钟
 329   2                    TIM_Value = 65536UL - (MAIN_Fosc /frequency/24+0.5);              //初值
 330   2                    TH_TEMP = (u8)(TIM_Value >> 8);
 331   2                    TL_TEMP = (u8)TIM_Value;
 332   2                    TH0=TH_TEMP;
 333   2                    TL0=TL_TEMP;
 334   2                    TR0=1;
 335   2                    break;
 336   2            case 4: //T1
 337   2      
 338   2                    TMOD &= ~0x30;    //工作模式,0: 16位自动重装, 1: 16位定时/计数, 2: 8位自动重装, 3: 16位自动重装
             -, 不可屏蔽中断
 339   2                    AUXR &= ~0x40;    //12T
 340   2                    TMOD &=  0x40;    //定时  
 341   2                    INT_CLKO |= 0x02; //输出时钟
 342   2                    TIM_Value     = 65536UL -(MAIN_Fosc /frequency/24+0.5);           //初值
 343   2                    TH_TEMP = (u8)(TIM_Value >> 8);
 344   2                    TL_TEMP = (u8)TIM_Value;
 345   2                    TH1=TH_TEMP;
 346   2                    TL1=TL_TEMP;
 347   2                    TR1 = 1;  //开始运行
 348   2                    break;
 349   2            case 0: //T2
 350   2                        //定时器2被固定为16位重装模式
 351   2                    AUXR &= ~0x04;    //12T
 352   2                    AUXR &= ~0x08;    //定时  
 353   2                    INT_CLKO |= 0x04; //输出时钟
 354   2                    TIM_Value     = 65536UL - (MAIN_Fosc /frequency/24+0.5);          //初值
 355   2                    TH_TEMP = (u8)(TIM_Value >> 8);
 356   2                    TL_TEMP = (u8)TIM_Value;
 357   2                    T2H=TH_TEMP;
 358   2                    T2L=TL_TEMP;
 359   2                    AUXR |= 0x10;     //开始运行
 360   2                    break;
 361   2            case 52:  //T3
 362   2                    
C51 COMPILER V9.52.0.0   GPIO                                                              09/21/2015 00:52:50 PAGE 7   

 363   2                    T4T3M &= ~0x02;   //12T
 364   2                    T4T3M &= ~0x04;   //定时  
 365   2                    T4T3M |=  0x01;   //输出时钟
 366   2                    TIM_Value     = 65536UL - (MAIN_Fosc /frequency/24+0.5);          //初值
 367   2                    TH_TEMP = (u8)(TIM_Value >> 8);
 368   2                    TL_TEMP = (u8)TIM_Value;
 369   2                    T3H=TH_TEMP;
 370   2                    T3L=TL_TEMP;
 371   2                    T4T3M |= 0x08;    //开始运行
 372   2                    break;
 373   2            case 54://T4
 374   2              
 375   2                    T4T3M &= ~0x20;   //12T
 376   2                    T4T3M &= ~0x40;   //定时  
 377   2                    T4T3M |=  0x10;   //输出时钟
 378   2                    TIM_Value     = 65536UL - (MAIN_Fosc /frequency/24+0.5);          //初值
 379   2                    TH_TEMP = (u8)(TIM_Value >> 8);
 380   2                    TL_TEMP = (u8)TIM_Value;
 381   2                    T4H=TH_TEMP;
 382   2                    T4L=TL_TEMP;
 383   2                    T4T3M |= 0x80;    //开始运行
 384   2                    break;
 385   2            default:
 386   2                    break;
 387   2          }
 388   1      }
 389          //========================================================================
 390          // 函数: noTone(u8 pin)
 391          // 描述: 结束频率发出的函数。
 392          // 参数: pin，选择需要引脚。
 393          // 返回: none
 394          // 版本: VER1.1
 395          // 日期: 2014-11-17
 396          // 备注: 
 397          //========================================================================
 398          void noTone(u8 pin)
 399          {
 400   1         
 401   1         switch(pin)
 402   1         {
 403   2            case 5: //T0
 404   2                    INT_CLKO &= ~0x01;        //不输出时钟
 405   2                    TR0=0;//关闭定时器0
 406   2                    break;
 407   2            case 4: //T1      
 408   2                    INT_CLKO &= ~0x02;        //不输出时钟
 409   2                    TR1 =0;//关闭定时器1
 410   2                    break;
 411   2            case 0: //T2
 412   2                    INT_CLKO &= ~0x04;        //不输出时钟
 413   2                    AUXR &= ~0x10;    //关闭定时器2
 414   2                    break;
 415   2            case 52:  //T3
 416   2                    T4T3M &= ~0x01;   //不输出时钟
 417   2                    T4T3M &= ~0x08;   //关闭定时器3
 418   2                    break;
 419   2            case 54://T4
 420   2                    T4T3M &= ~0x10;   //不输出时钟
 421   2                    T4T3M &= ~0x80;   //开始运行
 422   2                    break;
 423   2            default:
 424   2                    break;    
C51 COMPILER V9.52.0.0   GPIO                                                              09/21/2015 00:52:50 PAGE 8   

 425   2         }
 426   1         digitalWrite(pin,HIGH);
 427   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1373    ----
   CONSTANT SIZE    =    256    ----
   XDATA SIZE       =   ----      10
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
